#!/usr/bin/env python3
"""
Script de Setup Completo - Auto-Editor GUI v3.0
Com suporte a OpenAI Whisper, GPT-4o e Google Gemini

Este script instala todas as depend√™ncias necess√°rias para a aplica√ß√£o
Auto-Editor GUI com funcionalidades avan√ßadas de IA.
"""

import subprocess
import sys
import os
import shutil

def print_header():
    """Imprime cabe√ßalho do script"""
    print("=" * 70)
    print("üöÄ SETUP COMPLETO - AUTO-EDITOR GUI v3.0")
    print("Com OpenAI Whisper, GPT-4o e Google Gemini")
    print("=" * 70)
    print()

def check_python_version():
    """Verifica a vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def check_system_dependencies():
    """Verifica depend√™ncias do sistema"""
    print("\nüîß Verificando depend√™ncias do sistema...")
    
    missing = []
    
    # Verificar ffmpeg
    if not shutil.which("ffmpeg"):
        missing.append("ffmpeg")
        print("‚ùå ffmpeg n√£o encontrado")
    else:
        print("‚úÖ ffmpeg encontrado")
    
    # Verificar auto-editor
    if not shutil.which("auto-editor"):
        missing.append("auto-editor")
        print("‚ùå auto-editor n√£o encontrado")
    else:
        print("‚úÖ auto-editor encontrado")
    
    if missing:
        print(f"\n‚ö†Ô∏è Depend√™ncias ausentes: {', '.join(missing)}")
        print("Execute os seguintes comandos:")
        print("   pip install auto-editor")
        print("   brew install ffmpeg  # macOS")
        print("   sudo apt install ffmpeg  # Ubuntu/Debian")
        return False
    
    return True

def install_python_dependencies():
    """Instala depend√™ncias Python"""
    print("\nüì¶ Instalando depend√™ncias Python...")
    
    dependencies = [
        "openai",
        "psutil",
        "google-generativeai"
    ]
    
    for dep in dependencies:
        print(f"   Instalando {dep}...")
        try:
            result = subprocess.run([
                sys.executable, "-m", "pip", "install", dep
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"   ‚úÖ {dep} instalado")
            else:
                print(f"   ‚ùå Erro ao instalar {dep}: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Erro ao instalar {dep}: {e}")
            return False
    
    return True

def install_whisper():
    """Instala Whisper"""
    print("\nüó£Ô∏è Instalando OpenAI Whisper...")
    
    try:
        # Instalar Whisper
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "git+https://github.com/openai/whisper.git"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Whisper instalado com sucesso!")
        else:
            print("‚ùå Erro na instala√ß√£o do Whisper:")
            print(result.stderr)
            return False
        
        # Instalar tiktoken
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "tiktoken"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ tiktoken instalado com sucesso!")
        else:
            print("‚ùå Erro na instala√ß√£o do tiktoken:")
            print(result.stderr)
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante instala√ß√£o: {e}")
        return False

def test_installations():
    """Testa todas as instala√ß√µes"""
    print("\nüß™ Testando instala√ß√µes...")
    
    tests = [
        ("openai", "import openai"),
        ("whisper", "import whisper"),
        ("psutil", "import psutil"),
        ("google.generativeai", "import google.generativeai as genai")
    ]
    
    for name, import_statement in tests:
        try:
            exec(import_statement)
            print(f"‚úÖ {name} - OK")
        except ImportError as e:
            print(f"‚ùå {name} - Erro: {e}")
            return False
        except Exception as e:
            print(f"‚ùå {name} - Erro: {e}")
            return False
    
    return True

def create_config_file():
    """Cria arquivo de configura√ß√£o inicial"""
    print("\n‚öôÔ∏è Criando arquivo de configura√ß√£o...")
    
    config = {
        "openai": "",
        "gemini": "",
        "last_provider": "openai",
        "last_model": "gpt-4o"
    }
    
    try:
        import json
        with open("api_config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        print("‚úÖ Arquivo de configura√ß√£o criado: api_config.json")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar configura√ß√£o: {e}")
        return False

def show_next_steps():
    """Mostra pr√≥ximos passos"""
    print("\nüìñ PR√ìXIMOS PASSOS:")
    print("-" * 30)
    print("1. Configure suas API Keys:")
    print("   - OpenAI: https://platform.openai.com/api-keys")
    print("   - Google Gemini: https://makersuite.google.com/app/apikey")
    print()
    print("2. Execute a aplica√ß√£o:")
    print("   python3 auto_editor_gui.py")
    print()
    print("3. Configure as APIs na aba 'Configura√ß√µes'")
    print()
    print("4. Teste as conex√µes:")
    print("   - Clique em 'üß™ Testar OpenAI'")
    print("   - Clique em 'üß™ Testar Gemini'")
    print()
    print("5. Comece a usar:")
    print("   - Selecione um v√≠deo")
    print("   - Execute transcri√ß√£o com Whisper")
    print("   - Use an√°lise por LLM")
    print("   - Aproveite a reorganiza√ß√£o sem√¢ntica!")
    print()

def show_features():
    """Mostra funcionalidades dispon√≠veis"""
    print("\nüéØ FUNCIONALIDADES DISPON√çVEIS:")
    print("-" * 40)
    print("üó£Ô∏è Corre√ß√£o de Fala por IA:")
    print("   ‚Ä¢ Transcri√ß√£o com Whisper (API/Local)")
    print("   ‚Ä¢ An√°lise de erros por LLM (GPT-4o/Gemini)")
    print("   ‚Ä¢ Detec√ß√£o autom√°tica de problemas")
    print("   ‚Ä¢ Interface intuitiva para corre√ß√µes")
    print()
    print("üß† Reorganiza√ß√£o Sem√¢ntica:")
    print("   ‚Ä¢ An√°lise de estrutura narrativa")
    print("   ‚Ä¢ Sugest√µes de reordena√ß√£o de clipes")
    print("   ‚Ä¢ Identifica√ß√£o de conte√∫do desnecess√°rio")
    print("   ‚Ä¢ Renderiza√ß√£o avan√ßada")
    print()
    print("‚ö° Otimiza√ß√µes de Performance:")
    print("   ‚Ä¢ Processamento em lotes")
    print("   ‚Ä¢ Monitoramento de mem√≥ria")
    print("   ‚Ä¢ Limpeza autom√°tica de recursos")
    print("   ‚Ä¢ Interface responsiva")
    print()

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verificar Python
    if not check_python_version():
        print("\n‚ùå Setup cancelado. Atualize o Python.")
        return
    
    # Verificar depend√™ncias do sistema
    if not check_system_dependencies():
        print("\n‚ö†Ô∏è Algumas depend√™ncias do sistema est√£o ausentes.")
        print("Continue com a instala√ß√£o das depend√™ncias Python...")
    
    # Instalar depend√™ncias Python
    if not install_python_dependencies():
        print("\n‚ùå Falha na instala√ß√£o das depend√™ncias Python.")
        return
    
    # Instalar Whisper
    if not install_whisper():
        print("\n‚ùå Falha na instala√ß√£o do Whisper.")
        return
    
    # Testar instala√ß√µes
    if not test_installations():
        print("\n‚ùå Falha nos testes de instala√ß√£o.")
        return
    
    # Criar arquivo de configura√ß√£o
    if not create_config_file():
        print("\n‚ö†Ô∏è Erro ao criar arquivo de configura√ß√£o.")
    
    print("\nüéâ SETUP CONCLU√çDO COM SUCESSO!")
    print("=" * 70)
    
    show_features()
    show_next_steps()
    
    print("üöÄ Para iniciar a aplica√ß√£o:")
    print("   python3 auto_editor_gui.py")
    print("=" * 70)

if __name__ == "__main__":
    main() 