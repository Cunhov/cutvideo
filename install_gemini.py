#!/usr/bin/env python3
"""
Script de Instala√ß√£o - Google Generative AI (Gemini)
Auto-Editor GUI v3.0

Este script instala a biblioteca necess√°ria para usar o Google Gemini
na funcionalidade de an√°lise de fala por LLM.
"""

import subprocess
import sys
import os

def print_header():
    """Imprime cabe√ßalho do script"""
    print("=" * 60)
    print("üîß INSTALA√á√ÉO - GOOGLE GENERATIVE AI (GEMINI)")
    print("Auto-Editor GUI v3.0")
    print("=" * 60)
    print()

def check_python_version():
    """Verifica a vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def install_gemini():
    """Instala a biblioteca Google Generative AI"""
    print("\nüì¶ Instalando Google Generative AI...")
    
    try:
        # Instalar usando pip
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "google-generativeai"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Google Generative AI instalado com sucesso!")
            return True
        else:
            print("‚ùå Erro na instala√ß√£o:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante instala√ß√£o: {e}")
        return False

def test_gemini_installation():
    """Testa se a instala√ß√£o foi bem-sucedida"""
    print("\nüß™ Testando instala√ß√£o...")
    
    try:
        import google.generativeai as genai
        print("‚úÖ Biblioteca importada com sucesso!")
        
        # Testar configura√ß√£o b√°sica
        genai.configure(api_key="test_key")
        print("‚úÖ Configura√ß√£o b√°sica funcionando!")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def show_usage_instructions():
    """Mostra instru√ß√µes de uso"""
    print("\nüìñ INSTRU√á√ïES DE USO:")
    print("-" * 30)
    print("1. Obtenha uma API Key do Google AI Studio:")
    print("   https://makersuite.google.com/app/apikey")
    print()
    print("2. Configure a API Key na aplica√ß√£o:")
    print("   - Aba 'Configura√ß√µes'")
    print("   - Se√ß√£o 'Gerenciamento de APIs'")
    print("   - Campo 'Google Gemini API Key'")
    print()
    print("3. Teste a conex√£o:")
    print("   - Clique em 'üß™ Testar Gemini'")
    print()
    print("4. Use na an√°lise de fala:")
    print("   - Aba 'Corre√ß√£o de Fala (IA)'")
    print("   - Se√ß√£o 'An√°lise Inteligente por LLM'")
    print("   - Clique em 'ü§ñ 2. Analisar Erros com LLM'")
    print()

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verificar Python
    if not check_python_version():
        print("\n‚ùå Instala√ß√£o cancelada. Atualize o Python.")
        return
    
    # Instalar Gemini
    if not install_gemini():
        print("\n‚ùå Falha na instala√ß√£o do Google Generative AI.")
        return
    
    # Testar instala√ß√£o
    if not test_gemini_installation():
        print("\n‚ùå Falha no teste da instala√ß√£o.")
        return
    
    print("\nüéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 60)
    
    show_usage_instructions()
    
    print("üöÄ Para iniciar a aplica√ß√£o:")
    print("   python3 auto_editor_gui.py")
    print("=" * 60)

if __name__ == "__main__":
    main() 