#!/usr/bin/env python3
"""
Exemplo de Uso Avan√ßado - Auto-Editor GUI v3.0
Demonstra√ß√£o das novas funcionalidades de gerenciamento de APIs e an√°lise por LLM

Este script mostra como usar as funcionalidades avan√ßadas da aplica√ß√£o:
- Gerenciamento de APIs (OpenAI e Google Gemini)
- An√°lise de fala por LLM
- Configura√ß√£o persistente
- Sele√ß√£o de modelos
"""

import json
import os
import sys

def print_header():
    """Imprime cabe√ßalho do exemplo"""
    print("=" * 70)
    print("üöÄ EXEMPLO DE USO AVAN√áADO - AUTO-EDITOR GUI v3.0")
    print("Gerenciamento de APIs e An√°lise por LLM")
    print("=" * 70)
    print()

def demonstrate_api_management():
    """Demonstra o sistema de gerenciamento de APIs"""
    print("üîë GERENCIAMENTO DE APIS")
    print("-" * 40)
    
    # Exemplo de configura√ß√£o
    config_example = {
        "openai": "sk-...",  # Sua API Key da OpenAI
        "gemini": "AIza...",  # Sua API Key do Google Gemini
        "last_provider": "openai",
        "last_model": "gpt-4o"
    }
    
    print("1. Configura√ß√£o de API Keys:")
    print("   - Aba 'Configura√ß√µes'")
    print("   - Se√ß√£o 'Gerenciamento de APIs'")
    print("   - Campos para OpenAI e Google Gemini")
    print()
    
    print("2. Salvamento de configura√ß√µes:")
    print("   - Clique em 'üíæ Salvar Chaves'")
    print("   - Configura√ß√µes salvas em api_config.json")
    print("   - Carregamento autom√°tico na pr√≥xima execu√ß√£o")
    print()
    
    print("3. Teste de conectividade:")
    print("   - Clique em 'üß™ Testar OpenAI'")
    print("   - Clique em 'üß™ Testar Gemini'")
    print("   - Verifica√ß√£o autom√°tica de modelos dispon√≠veis")
    print()

def demonstrate_llm_selection():
    """Demonstra a sele√ß√£o de LLM"""
    print("üß† SELE√á√ÉO DE LLM")
    print("-" * 40)
    
    print("1. Provedores dispon√≠veis:")
    print("   - OpenAI (GPT-4o, GPT-4, GPT-3.5-turbo)")
    print("   - Google Gemini (gemini-1.5-pro, gemini-1.0-pro)")
    print()
    
    print("2. Sele√ß√£o de modelo:")
    print("   - Radio buttons para escolher provedor")
    print("   - Combobox com modelos dispon√≠veis")
    print("   - Sele√ß√£o autom√°tica de modelo padr√£o")
    print()
    
    print("3. Configura√ß√£o persistente:")
    print("   - √öltima sele√ß√£o salva automaticamente")
    print("   - Restaura√ß√£o na pr√≥xima execu√ß√£o")
    print("   - Status de conex√£o em tempo real")
    print()

def demonstrate_speech_analysis():
    """Demonstra a an√°lise de fala por LLM"""
    print("üó£Ô∏è AN√ÅLISE DE FALA POR LLM")
    print("-" * 40)
    
    print("1. Fluxo de trabalho:")
    print("   - Passo 1: Transcri√ß√£o com Whisper")
    print("   - Passo 2: An√°lise de erros por LLM")
    print("   - Passo 3: Revis√£o e aplica√ß√£o de corre√ß√µes")
    print()
    
    print("2. Tipos de erros detectados:")
    print("   - Palavras de preenchimento (um, ah, tipo, n√©)")
    print("   - Repeti√ß√µes desnecess√°rias")
    print("   - Gaguejos e hesita√ß√µes")
    print("   - Pausas longas")
    print("   - Erros gramaticais")
    print("   - Conte√∫do irrelevante")
    print()
    
    print("3. Interface de sugest√µes:")
    print("   - Lista categorizada de sugest√µes")
    print("   - Bot√µes para aplicar/rejeitar")
    print("   - Marca√ß√£o visual na transcri√ß√£o")
    print("   - Estat√≠sticas em tempo real")
    print()

def demonstrate_advanced_features():
    """Demonstra funcionalidades avan√ßadas"""
    print("‚ö° FUNCIONALIDADES AVAN√áADAS")
    print("-" * 40)
    
    print("1. Otimiza√ß√µes de mem√≥ria:")
    print("   - Processamento em lotes")
    print("   - Limpeza autom√°tica de recursos")
    print("   - Monitoramento em tempo real")
    print("   - Bot√£o de limpeza manual")
    print()
    
    print("2. Configura√ß√£o persistente:")
    print("   - API Keys salvas automaticamente")
    print("   - Prefer√™ncias de LLM mantidas")
    print("   - √öltimas configura√ß√µes restauradas")
    print()
    
    print("3. Tratamento de erros:")
    print("   - Valida√ß√£o de API Keys")
    print("   - Teste de conectividade")
    print("   - Fallback para modo local")
    print("   - Logs detalhados de erros")
    print()

def show_workflow_example():
    """Mostra exemplo de fluxo de trabalho completo"""
    print("üìã EXEMPLO DE FLUXO DE TRABALHO")
    print("-" * 40)
    
    print("1. Configura√ß√£o inicial:")
    print("   python3 auto_editor_gui.py")
    print("   ‚Üí Aba 'Configura√ß√µes'")
    print("   ‚Üí Inserir API Keys")
    print("   ‚Üí Testar conex√µes")
    print("   ‚Üí Salvar configura√ß√µes")
    print()
    
    print("2. Corre√ß√£o de fala:")
    print("   ‚Üí Aba 'Corre√ß√£o de Fala (IA)'")
    print("   ‚Üí Selecionar arquivo de v√≠deo")
    print("   ‚Üí Clique 'üé§ 1. Analisar Fala com Whisper'")
    print("   ‚Üí Aguardar transcri√ß√£o")
    print("   ‚Üí Clique 'ü§ñ 2. Analisar Erros com LLM'")
    print("   ‚Üí Revisar sugest√µes")
    print("   ‚Üí Aplicar corre√ß√µes desejadas")
    print()
    
    print("3. Reorganiza√ß√£o sem√¢ntica:")
    print("   ‚Üí Aba 'Reorganiza√ß√£o por IA'")
    print("   ‚Üí Descrever objetivo do v√≠deo")
    print("   ‚Üí Clique 'üß† Analisar Estrutura Narrativa'")
    print("   ‚Üí Revisar sugest√µes de reordena√ß√£o")
    print("   ‚Üí Aprovar ou descartar mudan√ßas")
    print("   ‚Üí Clique 'üé¨ Renderizar V√≠deo Final'")
    print()
    
    print("4. Monitoramento:")
    print("   ‚Üí Aba 'Console' para logs detalhados")
    print("   ‚Üí Monitoramento de mem√≥ria")
    print("   ‚Üí Limpeza manual se necess√°rio")
    print()

def show_api_examples():
    """Mostra exemplos de uso das APIs"""
    print("üîå EXEMPLOS DE USO DAS APIS")
    print("-" * 40)
    
    print("1. OpenAI GPT-4o:")
    print("   - An√°lise mais precisa e contextual")
    print("   - Melhor compreens√£o de nuances")
    print("   - Respostas mais detalhadas")
    print("   - Ideal para an√°lise complexa")
    print()
    
    print("2. Google Gemini:")
    print("   - Alternativa econ√¥mica")
    print("   - Boa performance para an√°lise b√°sica")
    print("   - Menor lat√™ncia")
    print("   - Ideal para processamento em lote")
    print()
    
    print("3. Sele√ß√£o de modelo:")
    print("   - GPT-4o: An√°lise avan√ßada")
    print("   - GPT-4: An√°lise equilibrada")
    print("   - GPT-3.5-turbo: An√°lise r√°pida")
    print("   - Gemini-1.5-pro: Alternativa robusta")
    print("   - Gemini-1.0-pro: Alternativa b√°sica")
    print()

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    demonstrate_api_management()
    demonstrate_llm_selection()
    demonstrate_speech_analysis()
    demonstrate_advanced_features()
    show_workflow_example()
    show_api_examples()
    
    print("üéâ CONFIGURA√á√ÉO CONCLU√çDA!")
    print("=" * 70)
    print("Agora voc√™ pode usar todas as funcionalidades avan√ßadas da aplica√ß√£o.")
    print("Execute: python3 auto_editor_gui.py")
    print("=" * 70)

if __name__ == "__main__":
    main() 